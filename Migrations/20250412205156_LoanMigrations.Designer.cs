// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Riid.Data;

#nullable disable

namespace Riid.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250412205156_LoanMigrations")]
    partial class LoanMigrations
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Riid.Models.AuthorModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Author");
                });

            modelBuilder.Entity("Riid.Models.BookModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("Fk_author")
                        .HasColumnType("bigint");

                    b.Property<long>("Fk_category")
                        .HasColumnType("bigint");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Pages")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Fk_author");

                    b.HasIndex("Fk_category");

                    b.ToTable("Book");
                });

            modelBuilder.Entity("Riid.Models.BookPdfModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("Fk_book")
                        .HasColumnType("bigint");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("Fk_book");

                    b.ToTable("BookPdf");
                });

            modelBuilder.Entity("Riid.Models.CategoryModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("Riid.Models.LoanModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("Fk_book_pdf")
                        .HasColumnType("bigint");

                    b.Property<long>("Fk_user")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Loan_Date")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("Return_Date")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("Fk_book_pdf");

                    b.HasIndex("Fk_user");

                    b.ToTable("Loan");
                });

            modelBuilder.Entity("Riid.Models.UserModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Riid.Models.BookModel", b =>
                {
                    b.HasOne("Riid.Models.AuthorModel", "Author")
                        .WithMany("Books")
                        .HasForeignKey("Fk_author")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Riid.Models.CategoryModel", "Category")
                        .WithMany("Books")
                        .HasForeignKey("Fk_category")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Riid.Models.BookPdfModel", b =>
                {
                    b.HasOne("Riid.Models.BookModel", "Book")
                        .WithMany("BookPdfs")
                        .HasForeignKey("Fk_book")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("Riid.Models.LoanModel", b =>
                {
                    b.HasOne("Riid.Models.BookPdfModel", "BookPdf")
                        .WithMany("Loans")
                        .HasForeignKey("Fk_book_pdf")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Riid.Models.UserModel", "User")
                        .WithMany("Loans")
                        .HasForeignKey("Fk_user")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BookPdf");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Riid.Models.AuthorModel", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("Riid.Models.BookModel", b =>
                {
                    b.Navigation("BookPdfs");
                });

            modelBuilder.Entity("Riid.Models.BookPdfModel", b =>
                {
                    b.Navigation("Loans");
                });

            modelBuilder.Entity("Riid.Models.CategoryModel", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("Riid.Models.UserModel", b =>
                {
                    b.Navigation("Loans");
                });
#pragma warning restore 612, 618
        }
    }
}
